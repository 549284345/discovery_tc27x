
/**********************************************************************************************************************
  COPYRIGHT
-----------------------------------------------------------------------------------------------------------------------
  \par      copyright
  \verbatim
  Copyright (c) 2017 by Vector Informatik GmbH.                                                  All rights reserved.

                This software is copyright protected and proprietary to Vector Informatik GmbH.
                Vector Informatik GmbH grants to you only those rights as set out in the license conditions.
                All other rights remain with Vector Informatik GmbH.
  \endverbatim
-----------------------------------------------------------------------------------------------------------------------
  FILE DESCRIPTION
-----------------------------------------------------------------------------------------------------------------------
  \file  File:  BrsHw.h
      Project:  Vector Basic Runtime System
       Module:  BrsHw for Platform Infineon Aurix

  \brief Description:  This is the hardware specific header file for Vector Basic Runtime System (BRS).
                       This file supports: see BrsHw_DerivativeList.h

  \attention Please note:
    The demo and example programs only show special aspects of the software. With regard to the fact
    that these programs are meant for demonstration purposes only, Vector Informatik liability shall be
    expressly excluded in cases of ordinary negligence, to the extent admissible by law or statute.
**********************************************************************************************************************/

#ifndef _BRSHW_H_
#define _BRSHW_H_

/**********************************************************************************************************************
  INCLUDES
**********************************************************************************************************************/
/*
 * Description: The BrsHw_DerivativeList header contains all derivative specific settings.
 *              This file is part of the BrsHw.
 */
#include "BrsHw_DerivativeList.h"

/*
 * Description: The BrsCfg header is used to configure different types of
 *              tests and system setups. Therefore it must be included first
 *              in each BRS and test module.
 *              This file is part of the BRS.
 */
/*#include "BrsCfg.h" */

#if !defined (BASIC_RUNTIME_SYSTEM_TYPE_MSR4)
  /*
   * Description: The v_cfg header is generated by the generation tool. It contains
   *              a list of currently used CANbedded/MSR3 modules (VGEN_ENABLE_*).
   *              For MSR4, this list is contained within VGenEnableSwitches.h of
   *              zBrs_AsrEmbeddedRunTimeSystemCfg5, included via BrsCfg.h.
   */
  #include "v_cfg.h"

  /*
   * Description: BrsTypes header is the abstraction for MSR/CBD to get access to type definitions
   */
  #include "BrsTypes.h"
#else
  /*
   * Description: Std_Types header provides all Standard Types within ASR-stacks
   */
  #include "Std_Types.h"
#endif /*BASIC_RUNTIME_SYSTEM_TYPE_MSR4*/

/**********************************************************************************************************************
  MODULE VERSION
**********************************************************************************************************************/
/*
 * Description: This is the BrsHw main and bug fix version. The version numbers are BCD coded. 
 *              E.g. a main version of 1.23 is coded with 0x0123, a bug fix version of 9 is coded 0x09.
 */
#define BRSHW_VERSION        0x0101u
#define BRSHW_BUGFIX_VERSION 0x01u

/**********************************************************************************************************************
  GLOBAL CONSTANT MACROS
**********************************************************************************************************************/
/*
 * Description: Macro for access to IO addresses
 */
#define BRSHW_IOS(type, address) (*((volatile type *)(address)))

#if defined (BRS_ENABLE_SUPPORT_LEDS)
/*
 * Description: set pin number of used pin for alive blinking mechanism.
 */
  #define BRSHW_LED_SYSTEM_OK 0 /* this is just a dummy on this paltform, not used within BrsHwSetLed() */
#endif /*BRS_ENABLE_SUPPORT_LEDS*/

/**********************************************************************************************************************
  Compiler abstraction
**********************************************************************************************************************/
#if defined (BRS_COMP_GNU)
  #define BRSHW_INT_DECL(x) void

#else
  #error "Compiler not yet supported"
#endif

/**********************************************************************************************************************
  BrsHW configuration
**********************************************************************************************************************/
#if defined (BRS_OS_USECASE_OS)
/* nothing to be done here yet */

#elif defined (BRS_OS_USECASE_OSGEN7)
/* nothing to be done here yet */

#else
  #error "Configured OS_USECASE is not supported (Organi filtered because of ALM attributes or wrong set within Makefile.config)"
#endif

/**********************************************************************************************************************
  Global variables
**********************************************************************************************************************/

/**********************************************************************************************************************
  Global const variables
**********************************************************************************************************************/
/*
 * Description: These constants are used to propagate the Versions over module boundaries.
 *              The version numbers are BCD coded. E.g. a sub version of 23 is coded with 0x23, 
 *              a bug fix version of 9 is coded 0x09.
 */
extern uint8 const kBrsHwMainVersion;
extern uint8 const kBrsHwSubVersion;
extern uint8 const kBrsHwBugfixVersion;
extern void Appl_UnlockInit(void);
extern void Appl_UnlockEndinit(void);
extern void Appl_LockInit(void);
extern void Appl_LockEndinit(void);

extern void ApplCanWaitSetMCR(void);

/**********************************************************************************************************************
  Global function prototypes
**********************************************************************************************************************/

/*****************************************************************************/
/**
 * @brief      This function has to be used to initialize the Watchdog.
 * @pre        -
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from main@BrsMain or EcuM at power on initialization
 */
/*****************************************************************************/
void BrsHwWatchdogInitPowerOn(void);

/*****************************************************************************/
/**
 * @brief      This function has to be used to initialize the PLL.
 * @pre        -
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from main@BrsMain or EcuM at power on initialization
 */
/*****************************************************************************/
void BrsHwPllInitPowerOn(void);

#if !defined (VGEN_ENABLE_DRVPORT)
# if defined (BRS_ENABLE_TCM_SUPPORT)
/*************************************
 TCM Functions
**************************************/
void BrsHw_WriteDio_TCM_CLK_OUT(uint8 Level);
void BrsHw_WriteDio_TCM_SDA_OUT(uint8 Level);
uint8 BrsHw_ReadDio_TCM_CLK_IN(void);
uint8 BrsHw_ReadDio_TCM_SDA_IN(void);
# endif /*BRS_ENABLE_TCM_SUPPORT*/
#endif /*!VGEN_ENABLE_DRVPORT*/

/*****************************************************************************/
/**
 * @brief      This function has to be used to initialize the used ports.
 * @pre        -
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from main@BrsMain or EcuM at power on initialization
 */
/*****************************************************************************/
void BrsHwPortInitPowerOn(void);

/*****************************************************************************/
/**
 * @brief      This function has to be used to initialize misc features not
 *             covered by the three functions above.
 * @pre        -
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from main@BrsMain or EcuM at power on initialization
 */
/*****************************************************************************/
void BrsHwEvaBoardInitPowerOn(void);

/*****************************************************************************/
/**
 * @brief      Disable the global system interrupt and initialize the INT
 *             lock handler variables.
 * @pre        Must be the first function call in main@BrsMain
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from main@BrsMain at power on initialization
 */
/*****************************************************************************/
void BrsHwDisableInterruptAtPowerOn(void);

/*****************************************************************************/
/**
 * @brief      Enable the global system interrupt the first time
 * @pre        Must be called after all initializations are done
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from main@BrsMain at power on initialization
 */
/*****************************************************************************/
void BrsHwEnableInterruptAtPowerOn(void);

#if !defined (BRS_OS_USECASE_OSGEN7)
/*****************************************************************************/
/**
 * @brief      This function has to be used to initialize the used interrupts.
 * @pre        -
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from BrsHwEnableInterruptAtPowerOn or EcuM-DriverInitThree
 */
/*****************************************************************************/
void BrsHwConfigureInterruptsAtPowerOn(void);
#endif /*!BRS_OS_USECASE_OSGEN7*/

/*****************************************************************************/
/**
 * @brief      Disables the global interrupt of the micro. This is done in a
 *             "save way" to allow also nested calls of BrsHwDisableInterrupt
 *             and BrsHwRestoreInterrupt. The first call of BrsHwDisableInterrupt
 *             stores the current state of the global INT flag and the last
 *             call to BrsHwRestoreInterrupt restores the state.
 * @pre        -
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from all modules to disable the global interrupt
 */
/*****************************************************************************/
void BrsHwDisableInterrupt(void);

/*****************************************************************************/
/**
 * @brief      Restores the state of the global interrupt of the micro. This
 *             is done in a "save way" to allow also nested calls of
 *             BrsHwDisableInterrupt and BrsHwRestoreInterrupt. The first call
 *             of BrsHwDisableInterrupt stores the current state of the global
 *             INT flag and the last call to BrsHwRestoreInterrupt restores the
 *             state.
 * @pre        -
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from all modules to enable the global interrupt
 */
/*****************************************************************************/
void BrsHwRestoreInterrupt(void);

/*****************************************************************************/
/**
 * @brief      restart ECU (issue a software reset or jump to startup code)
 * @pre        -
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from e.g. ECU state handling
 */
/*****************************************************************************/
void BrsHwSoftwareResetECU(void);

#if defined (BRS_ENABLE_SUPPORT_LEDS)
/*****************************************************************************/
/**
 * @brief      A platform specific usage of LedNumber is used to toggle a LED.
*              Please note, that not every EVA hardware supports LEDs and due
*              to this do not use this feature for a general test case!
 * @pre        -
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from all modules to set or clear a LED
 */
/*****************************************************************************/
void BrsHwSetLed(
  /*
   *  Description        : Number of the LED to be handled
   *  Direction          : in
   *  Modified           : no
   *  Val. range / Coding: 0..7
   */
  uint8 LedNumber,
  /*
   *  Description        : New state of the LED
   *  Direction          : in
   *  Modified           : no
   *  Val. range / Coding: 0..1
   */
  uint8 NewState
);
#endif /*BRS_ENABLE_SUPPORT_LEDS*/

/*****************************************************************************/
/**
 * @brief      This API is used for the BRS time measurement support to get a
 *             default time value for all measurements with this platform to
 *             be able to compare time measurements on different dates based
 *             on this time result.
 * @pre        -
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from TimeMeasurement
 */
/*****************************************************************************/
void BrsHwTime100NOP(void);

# if defined (BRSASR_ENABLE_SAFECTXSUPPORT)
/*****************************************************************************/
/**
 * @brief      This API is used to enable hardware access in untrusted mode
 * @pre        -
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from BrsAsrInitBsw
 */
/*****************************************************************************/
void BrsHw_EnableHwAccess(void);
# endif /*BRSASR_ENABLE_SAFECTXSUPPORT*/

#endif /*_BRSHW_H_*/
