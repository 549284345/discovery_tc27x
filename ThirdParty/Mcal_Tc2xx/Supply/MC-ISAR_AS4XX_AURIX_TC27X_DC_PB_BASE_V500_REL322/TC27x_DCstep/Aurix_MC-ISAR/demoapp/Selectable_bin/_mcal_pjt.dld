/* ----------------------------------------------------------------------------
 *
 * Target: TriCore
 *
 * This is a sample linker command file .
 *
 * For a description of the different statements in this file, please refer
 * to the D-LD Linker User's Manual.
 * ------------------------------------------------------------------------- */


/* The MEMORY command defines memory areas using a name intended
 * to suggest its purpose:
 *
 * ------------------------------------------------------------------------ */

-Xgenerate-copytables

__ISTACK_SIZE =  8K;
__USTACK_SIZE =  8K;
__HEAP_SIZE =    4K ;
__CSA_SIZE = 16K ;

__TC0_PCON2_VALUE          = 0x00180008 ;
__TC0_DCON2_VALUE          = 0x00700000 ;
__TC1_PCON2_VALUE          = 0x00200010 ;
__TC1_DCON2_VALUE          = 0x00780008 ;
__TC2_PCON2_VALUE          = 0x00200010 ;
__TC2_DCON2_VALUE          = 0x00780008 ;

__SBST_DSPR_BASE_ADDR      = 0xd0000000 ;
__SBST_PSPR_BASE_ADDR      = 0xc0000000 ;
__SBST_CRC_RESULT          = ("__SBST_DSPR_BASE_ADDR"+0x00FC); 

__INTTAB_START_ADDR        = 0x800F0000 ;

MEMORY
{
  /* - 0x(8)A0000000--0x(8)A000001F ABM Header Start */
  /* - 0x(8)A0000020 Boot Address */
  /* - 0x(A)80000020--0x(A)80017FFF Code Application Pattern */
    
	PMU_PFLASH0_BMI:    org = 0x80000000, len = 32     /* boot header */
    PMU_STARTUP:        org = 0x80000020, len = 0xE0   /* startup code */
    PMU_TRAPTAB:        org = 0x80000100, len = 0x300  /* trap vector tables */
	
	FLS_ERASE_PFLASH0:  org = 0x80000400, len = 0x200  /*Program Flash Memory (PFLASH0)*/
    FLS_WRITE_PFLASH0:  org = 0x80000600, len = 0x200  /*Program Flash Memory (PFLASH0)*/
	
	PMU_INTTAB_TC1:     org = 0x80000800, len = 0xC00 /* interrupt vector table */
    PMU_INTTAB_TC2:     org = 0x80001400, len = 0xC00 /* interrupt vector table */
	
    PMU_USER_FUNCS0:    org = 0x80002000, len = 0x400	
	HSM_RESERVED1_PMU_FLSAH0:  org = 0x80002400, len = 16K
	
	PMU_PF0_PATTERNS:   org = 0xA0006400, len = 0x240 /*Patterns of PF0 for PMUECCEDCTST (NOTE: 0xA..address is the non-cached equivalent of 0x8...address)*/
    PMU_USER_FUNCS:     org = 0x80006640, len = 165K - 0x240
    /* SBST (any 32K aligned address is ok for SBST) and RODATA allocated in this region */
    PMU_PFLASH0_CONST:  org = 0x80030000, len = 192K /*Program Flash Memory (PFLASH0)*/
	HSM_RESERVED2_PMU_FLSAH0:  org = 0x80060000, len = 128K
    PMU_PFLASH0:        org = 0x80080000, len = 440K
	
    PMU_INTTAB_TC0:     org = 0x800F0000, len = 0x2000 /* interrupt vector table */



    

	

    FLSLOADER_RAM_CODE: org = 0x70100100, len = 0x200  /* PSPR for Flsloader demo */
    FLS_ERASE_SRAM:     org = 0x70100300, len = 0x200  /*Global Scratch-Pad RAM (PSPR)*/
    FLS_WRITE_SRAM:     org = 0x70100500, len = 0x200  /*Global Scratch-Pad RAM (PSPR)*/
	
	


    PMU_PF1_PATTERNS: org = 0xA0200000, len = 0x240 /*Patterns of PF1 for PMUECCEDCTST (NOTE: 0xA..address is the non-cached equivalent of 0x8...address)*/
    PMU_PFLASH1: org = 0x80200240, len = 2M - 0x240 /*Program Flash Memory (PFLASH1)*/

    PMU_PF2_PATTERNS: org = 0xA0400000, len = 0x240 /*Patterns of PF2 for PMUECCEDCTST (NOTE: 0xA..address is the non-cached equivalent of 0x8...address)*/
    PMU_PFLASH2: org = 0x80400240, len = 2M - 0x240  /*Program Flash Memory (PFLASH2)*/
    PMU_PF3_PATTERNS: org = 0xA0600000, len = 0x240/*Patterns of PF3 for PMUECCEDCTST (NOTE: 0xA..address is the non-cached equivalent of 0x8...address)*/
    PMU_PFLASH3: org = 0x80600240, len = 2M - 0x240  /*Program Flash Memory (PFLASH3)*/
    CONFIG_DATA: org = 0xA0100000, len = 20K  


    CPU0_PMI_PSPR:      org = 0x70100800, len = 24K - 2K     /*Scratch-Pad RAM (PSPR)*/
    CPU1_PMI_PSPR:      org = 0x60100100, len = 32K - 256     /*Scratch-Pad RAM (PSPR)*/
    CPU2_PMI_PSPR:      org = 0x50100100, len = 32K - 256     /*Scratch-Pad RAM (PSPR)*/

    /* 100 bytes of DSPR is reserved for sbst for all 3 cores */
    CPU0_DMI_DSPR_NEAR: org = 0x70000100, len = 0x1F00            /*Local Data RAM (DSPR)*/
    /* reserve memory for Standby RAM redundancy data */
    MCU_STANDBY_DSPR0:  org = 0x70002000, len = 0x44              /* DSPR0 Stanby RAM + CRC */

    CPU0_DMI_DSPR:      org = 0x70002044, len = 120K - 8260 - 12K /* Remaining DSPR0 area*/        
    CPU1_DMI_DSPR:      org = 0x60000100, len = 120K - 12K        /*Local Data RAM (DSPR)*/
    CPU2_DMI_DSPR:      org = 0x50000100, len = 120K - 12K        /*Local Data RAM (DSPR)*/
  
    DMI_DSPR:           org = 0xD0019000, len = 12K    /*Local Data RAM (DSPR)*/
    LMU_SRAM:           org = 0xB0000000, len = 32K    /*Local Data RAM (DSPR)*/
       
}


SECTIONS
{

  /* Code Allocation */
  GROUP :
  {
    .BMD_HDR_CONST_FAR_UNSPECIFIED (CONST) :
    {
      KEEP(*(.BMD_HDR_CONST_FAR_UNSPECIFIED))
    }
  } > PMU_PFLASH0_BMI

  /*
   * The startup code should be placed where the CPU expects it after a reset,
   * so we try to locate it first, no matter where it appears in the list of
   * objects and libraries (note: because the wildcard pattern doesn't match
   * directories, we'll try to find crt0.o in various (sub)directories).
   */
  GROUP :
  {
    .startup (TEXT) :
    {
      KEEP (*(.startup_code))

    }
  } > PMU_STARTUP
    
  /*
   * Allocate trap and interrupt vector tables.
   */

  	GROUP ALIGN(256): {
		.traptab.cpu0 (TEXT) : { 
			KEEP(*(.text.CPU0_TRAP_HANDLER_CODE_ROM))
  	}
	} > PMU_TRAPTAB
  
    	GROUP ALIGN(256): {
		.traptab.cpu1 (TEXT) : { 
			KEEP(*(.text.CPU1_TRAP_HANDLER_CODE_ROM))
  	}
	} > PMU_TRAPTAB
  
   GROUP ALIGN(256): {
		.traptab.cpu2 (TEXT) : { 
			KEEP(*(.text.CPU2_TRAP_HANDLER_CODE_ROM))
  	}
	} > PMU_TRAPTAB

  /* Interrupt vector table */
	GROUP BIND(__INTTAB_START_ADDR + 0x0)   : { .inttab_tc0_000 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x0)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x20)   : { .inttab_tc0_001 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x1)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x40)   : { .inttab_tc0_002 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x2)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x60)   : { .inttab_tc0_003 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x3)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x80)   : { .inttab_tc0_004 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x4)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xA0)   : { .inttab_tc0_005 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x5)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xC0)   : { .inttab_tc0_006 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x6)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xE0)   : { .inttab_tc0_007 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x7)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x100)   : { .inttab_tc0_008 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x8)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x120)   : { .inttab_tc0_009 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x9)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x140)   : { .inttab_tc0_00A (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xa)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x160)   : { .inttab_tc0_00B (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xb)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x180)   : { .inttab_tc0_00C (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xc)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1A0)   : { .inttab_tc0_00D (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xd)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1C0)   : { .inttab_tc0_00E (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xe)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1E0)   : { .inttab_tc0_00F (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xf)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x200)   : { .inttab_tc0_010 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x10)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x220)   : { .inttab_tc0_011 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x11)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x240)   : { .inttab_tc0_012 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x12)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x260)   : { .inttab_tc0_013 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x13)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x280)   : { .inttab_tc0_014 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x14)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x2A0)   : { .inttab_tc0_015 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x15)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x2C0)   : { .inttab_tc0_016 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x16)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x2E0)   : { .inttab_tc0_017 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x17)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x300)   : { .inttab_tc0_018 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x18)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x320)   : { .inttab_tc0_019 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x19)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x340)   : { .inttab_tc0_01A (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x1a)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x360)   : { .inttab_tc0_01B (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x1b)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x380)   : { .inttab_tc0_01C (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x1c)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x3A0)   : { .inttab_tc0_01D (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x1d)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x3C0)   : { .inttab_tc0_01E (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x1e)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x3E0)   : { .inttab_tc0_01F (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x1f)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x400)   : { .inttab_tc0_020 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x20)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x420)   : { .inttab_tc0_021 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x21)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x440)   : { .inttab_tc0_022 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x22)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x460)   : { .inttab_tc0_023 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x23)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x480)   : { .inttab_tc0_024 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x24)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x4A0)   : { .inttab_tc0_025 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x25)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x4C0)   : { .inttab_tc0_026 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x26)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x4E0)   : { .inttab_tc0_027 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x27)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x500)   : { .inttab_tc0_028 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x28)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x520)   : { .inttab_tc0_029 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x29)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x540)   : { .inttab_tc0_02A (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x2a)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x560)   : { .inttab_tc0_02B (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x2b)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x580)   : { .inttab_tc0_02C (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x2c)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x5A0)   : { .inttab_tc0_02D (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x2d)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x5C0)   : { .inttab_tc0_02E (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x2e)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x5E0)   : { .inttab_tc0_02F (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x2f)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x600)   : { .inttab_tc0_030 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x30)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x620)   : { .inttab_tc0_031 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x31)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x640)   : { .inttab_tc0_032 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x32)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x660)   : { .inttab_tc0_033 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x33)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x680)   : { .inttab_tc0_034 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x34)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x6A0)   : { .inttab_tc0_035 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x35)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x6C0)   : { .inttab_tc0_036 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x36)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x6E0)   : { .inttab_tc0_037 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x37)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x700)   : { .inttab_tc0_038 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x38)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x720)   : { .inttab_tc0_039 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x39)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x740)   : { .inttab_tc0_03A (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x3a)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x760)   : { .inttab_tc0_03B (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x3b)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x780)   : { .inttab_tc0_03C (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x3c)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x7A0)   : { .inttab_tc0_03D (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x3d)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x7C0)   : { .inttab_tc0_03E (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x3e)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x7E0)   : { .inttab_tc0_03F (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x3f)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x800)   : { .inttab_tc0_040 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x40)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x820)   : { .inttab_tc0_041 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x41)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x840)   : { .inttab_tc0_042 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x42)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x860)   : { .inttab_tc0_043 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x43)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x880)   : { .inttab_tc0_044 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x44)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x8A0)   : { .inttab_tc0_045 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x45)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x8C0)   : { .inttab_tc0_046 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x46)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x8E0)   : { .inttab_tc0_047 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x47)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x900)   : { .inttab_tc0_048 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x48)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x920)   : { .inttab_tc0_049 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x49)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x940)   : { .inttab_tc0_04A (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x4a)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x960)   : { .inttab_tc0_04B (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x4b)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x980)   : { .inttab_tc0_04C (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x4c)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x9A0)   : { .inttab_tc0_04D (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x4d)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x9C0)   : { .inttab_tc0_04E (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x4e)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x9E0)   : { .inttab_tc0_04F (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x4f)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xA00)   : { .inttab_tc0_050 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x50)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xA20)   : { .inttab_tc0_051 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x51)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xA40)   : { .inttab_tc0_052 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x52)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xA60)   : { .inttab_tc0_053 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x53)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xA80)   : { .inttab_tc0_054 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x54)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xAA0)   : { .inttab_tc0_055 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x55)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xAC0)   : { .inttab_tc0_056 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x56)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xAE0)   : { .inttab_tc0_057 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x57)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xB00)   : { .inttab_tc0_058 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x58)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xB20)   : { .inttab_tc0_059 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x59)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xB40)   : { .inttab_tc0_05A (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x5a)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xB60)   : { .inttab_tc0_05B (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x5b)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xB80)   : { .inttab_tc0_05C (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x5c)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xBA0)   : { .inttab_tc0_05D (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x5d)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xBC0)   : { .inttab_tc0_05E (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x5e)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xBE0)   : { .inttab_tc0_05F (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x5f)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xC00)   : { .inttab_tc0_060 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x60)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xC20)   : { .inttab_tc0_061 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x61)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xC40)   : { .inttab_tc0_062 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x62)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xC60)   : { .inttab_tc0_063 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x63)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xC80)   : { .inttab_tc0_064 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x64)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xCA0)   : { .inttab_tc0_065 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x65)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xCC0)   : { .inttab_tc0_066 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x66)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xCE0)   : { .inttab_tc0_067 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x67)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xD00)   : { .inttab_tc0_068 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x68)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xD20)   : { .inttab_tc0_069 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x69)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xD40)   : { .inttab_tc0_06A (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x6a)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xD60)   : { .inttab_tc0_06B (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x6b)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xD80)   : { .inttab_tc0_06C (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x6c)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xDA0)   : { .inttab_tc0_06D (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x6d)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xDC0)   : { .inttab_tc0_06E (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x6e)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xDE0)   : { .inttab_tc0_06F (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x6f)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xE00)   : { .inttab_tc0_070 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x70)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xE20)   : { .inttab_tc0_071 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x71)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xE40)   : { .inttab_tc0_072 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x72)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xE60)   : { .inttab_tc0_073 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x73)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xE80)   : { .inttab_tc0_074 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x74)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xEA0)   : { .inttab_tc0_075 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x75)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xEC0)   : { .inttab_tc0_076 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x76)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xEE0)   : { .inttab_tc0_077 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x77)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xF00)   : { .inttab_tc0_078 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x78)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xF20)   : { .inttab_tc0_079 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x79)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xF40)   : { .inttab_tc0_07A (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x7a)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xF60)   : { .inttab_tc0_07B (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x7b)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xF80)   : { .inttab_tc0_07C (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x7c)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xFA0)   : { .inttab_tc0_07D (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x7d)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xFC0)   : { .inttab_tc0_07E (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x7e)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0xFE0)   : { .inttab_tc0_07F (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x7f)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1000)   : { .inttab_tc0_080 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x80)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1020)   : { .inttab_tc0_081 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x81)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1040)   : { .inttab_tc0_082 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x82)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1060)   : { .inttab_tc0_083 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x83)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1080)   : { .inttab_tc0_084 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x84)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x10A0)   : { .inttab_tc0_085 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x85)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x10C0)   : { .inttab_tc0_086 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x86)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x10E0)   : { .inttab_tc0_087 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x87)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1100)   : { .inttab_tc0_088 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x88)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1120)   : { .inttab_tc0_089 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x89)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1140)   : { .inttab_tc0_08A (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x8a)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1160)   : { .inttab_tc0_08B (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x8b)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1180)   : { .inttab_tc0_08C (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x8c)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x11A0)   : { .inttab_tc0_08D (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x8d)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x11C0)   : { .inttab_tc0_08E (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x8e)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x11E0)   : { .inttab_tc0_08F (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x8f)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1200)   : { .inttab_tc0_090 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x90)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1220)   : { .inttab_tc0_091 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x91)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1240)   : { .inttab_tc0_092 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x92)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1260)   : { .inttab_tc0_093 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x93)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1280)   : { .inttab_tc0_094 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x94)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x12A0)   : { .inttab_tc0_095 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x95)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x12C0)   : { .inttab_tc0_096 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x96)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x12E0)   : { .inttab_tc0_097 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x97)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1300)   : { .inttab_tc0_098 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x98)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1320)   : { .inttab_tc0_099 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x99)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1340)   : { .inttab_tc0_09A (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x9a)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1360)   : { .inttab_tc0_09B (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x9b)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1380)   : { .inttab_tc0_09C (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x9c)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x13A0)   : { .inttab_tc0_09D (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x9d)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x13C0)   : { .inttab_tc0_09E (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x9e)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x13E0)   : { .inttab_tc0_09F (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0x9f)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1400)   : { .inttab_tc0_0A0 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xa0)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1420)   : { .inttab_tc0_0A1 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xa1)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1440)   : { .inttab_tc0_0A2 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xa2)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1460)   : { .inttab_tc0_0A3 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xa3)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1480)   : { .inttab_tc0_0A4 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xa4)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x14A0)   : { .inttab_tc0_0A5 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xa5)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x14C0)   : { .inttab_tc0_0A6 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xa6)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x14E0)   : { .inttab_tc0_0A7 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xa7)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1500)   : { .inttab_tc0_0A8 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xa8)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1520)   : { .inttab_tc0_0A9 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xa9)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1540)   : { .inttab_tc0_0AA (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xaa)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1560)   : { .inttab_tc0_0AB (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xab)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1580)   : { .inttab_tc0_0AC (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xac)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x15A0)   : { .inttab_tc0_0AD (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xad)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x15C0)   : { .inttab_tc0_0AE (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xae)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x15E0)   : { .inttab_tc0_0AF (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xaf)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1600)   : { .inttab_tc0_0B0 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xb0)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1620)   : { .inttab_tc0_0B1 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xb1)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1640)   : { .inttab_tc0_0B2 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xb2)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1660)   : { .inttab_tc0_0B3 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xb3)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1680)   : { .inttab_tc0_0B4 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xb4)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x16A0)   : { .inttab_tc0_0B5 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xb5)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x16C0)   : { .inttab_tc0_0B6 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xb6)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x16E0)   : { .inttab_tc0_0B7 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xb7)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1700)   : { .inttab_tc0_0B8 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xb8)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1720)   : { .inttab_tc0_0B9 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xb9)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1740)   : { .inttab_tc0_0BA (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xba)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1760)   : { .inttab_tc0_0BB (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xbb)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1780)   : { .inttab_tc0_0BC (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xbc)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x17A0)   : { .inttab_tc0_0BD (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xbd)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x17C0)   : { .inttab_tc0_0BE (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xbe)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x17E0)   : { .inttab_tc0_0BF (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xbf)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1800)   : { .inttab_tc0_0C0 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xc0)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1820)   : { .inttab_tc0_0C1 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xc1)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1840)   : { .inttab_tc0_0C2 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xc2)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1860)   : { .inttab_tc0_0C3 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xc3)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1880)   : { .inttab_tc0_0C4 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xc4)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x18A0)   : { .inttab_tc0_0C5 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xc5)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x18C0)   : { .inttab_tc0_0C6 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xc6)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x18E0)   : { .inttab_tc0_0C7 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xc7)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1900)   : { .inttab_tc0_0C8 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xc8)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1920)   : { .inttab_tc0_0C9 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xc9)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1940)   : { .inttab_tc0_0CA (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xca)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1960)   : { .inttab_tc0_0CB (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xcb)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1980)   : { .inttab_tc0_0CC (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xcc)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x19A0)   : { .inttab_tc0_0CD (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xcd)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x19C0)   : { .inttab_tc0_0CE (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xce)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x19E0)   : { .inttab_tc0_0CF (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xcf)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1A00)   : { .inttab_tc0_0D0 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xd0)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1A20)   : { .inttab_tc0_0D1 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xd1)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1A40)   : { .inttab_tc0_0D2 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xd2)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1A60)   : { .inttab_tc0_0D3 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xd3)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1A80)   : { .inttab_tc0_0D4 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xd4)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1AA0)   : { .inttab_tc0_0D5 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xd5)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1AC0)   : { .inttab_tc0_0D6 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xd6)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1AE0)   : { .inttab_tc0_0D7 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xd7)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1B00)   : { .inttab_tc0_0D8 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xd8)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1B20)   : { .inttab_tc0_0D9 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xd9)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1B40)   : { .inttab_tc0_0DA (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xda)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1B60)   : { .inttab_tc0_0DB (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xdb)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1B80)   : { .inttab_tc0_0DC (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xdc)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1BA0)   : { .inttab_tc0_0DD (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xdd)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1BC0)   : { .inttab_tc0_0DE (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xde)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1BE0)   : { .inttab_tc0_0DF (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xdf)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1C00)   : { .inttab_tc0_0E0 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xe0)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1C20)   : { .inttab_tc0_0E1 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xe1)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1C40)   : { .inttab_tc0_0E2 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xe2)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1C60)   : { .inttab_tc0_0E3 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xe3)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1C80)   : { .inttab_tc0_0E4 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xe4)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1CA0)   : { .inttab_tc0_0E5 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xe5)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1CC0)   : { .inttab_tc0_0E6 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xe6)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1CE0)   : { .inttab_tc0_0E7 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xe7)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1D00)   : { .inttab_tc0_0E8 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xe8)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1D20)   : { .inttab_tc0_0E9 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xe9)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1D40)   : { .inttab_tc0_0EA (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xea)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1D60)   : { .inttab_tc0_0EB (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xeb)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1D80)   : { .inttab_tc0_0EC (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xec)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1DA0)   : { .inttab_tc0_0ED (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xed)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1DC0)   : { .inttab_tc0_0EE (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xee)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1DE0)   : { .inttab_tc0_0EF (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xef)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1E00)   : { .inttab_tc0_0F0 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xf0)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1E20)   : { .inttab_tc0_0F1 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xf1)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1E40)   : { .inttab_tc0_0F2 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xf2)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1E60)   : { .inttab_tc0_0F3 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xf3)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1E80)   : { .inttab_tc0_0F4 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xf4)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1EA0)   : { .inttab_tc0_0F5 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xf5)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1EC0)   : { .inttab_tc0_0F6 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xf6)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1EE0)   : { .inttab_tc0_0F7 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xf7)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1F00)   : { .inttab_tc0_0F8 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xf8)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1F20)   : { .inttab_tc0_0F9 (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xf9)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1F40)   : { .inttab_tc0_0FA (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xfa)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1F60)   : { .inttab_tc0_0FB (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xfb)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1F80)   : { .inttab_tc0_0FC (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xfc)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1FA0)   : { .inttab_tc0_0FD (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xfd)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1FC0)   : { .inttab_tc0_0FE (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xfe)) }}> PMU_INTTAB_TC0
	GROUP BIND(__INTTAB_START_ADDR + 0x1FE0)   : { .inttab_tc0_0FF (TEXT) ALIGN(8) : { KEEP (*(.intvec_tc0_0xff)) }}> PMU_INTTAB_TC0		

  __INTTAB_CPU0 = __INTTAB_START_ADDR;
  __INTTAB_CPU1 = __INTTAB_START_ADDR; /*Single interrupt table for all CPUs*/
  __INTTAB_CPU2 = __INTTAB_START_ADDR; /*Single interrupt table for all CPUs*/


  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu0_copytable] :
  {
  .CPU0_DSPR_STL_LMUBSS1 (BSS) :
  {
     *(.bss.Lmu.CPU0_DSPR_RAM_8BIT)
  }    
  } > CPU0_DMI_DSPR 
   
  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu0_copytable]:
  {
  .CPU0_DSPR_STL_LMUBSS2 (BSS):
  {
    *(.bss.Lmu.CPU0_DSPR_RAM_32BIT)
  }     
  } > CPU0_DMI_DSPR 
   
     
  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu0_copytable]:
  {
    .CPU0_DSPR_STL_DATA (BSS) :
    {
      *(.bss.CPU0_DSPR_RAM_NOINIT)
    }
  } > CPU0_DMI_DSPR  

/* 
	Allocate .bss section for modules to CORE1 DSPR
*/  
  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu1_copytable]:
  {
    .CPU1_DSPR_STL_DATA (BSS) : 
    {
      *(.bss.CPU1_DSPR_RAM_NOINIT)
    }
  } > CPU1_DMI_DSPR 
  
/* 
	Allocate .bss section for modules to CORE2 DSPR
*/  
  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu2_copytable]:
  {
    .CPU2_DSPR_STL_DATA (BSS) :
    {
      *(.bss.CPU2_DSPR_RAM_NOINIT)
    }
  } > CPU2_DMI_DSPR   
   
  GROUP  LOAD(>PMU_PFLASH0) COPYTABLE[cpu0_copytable]:
  {
    .CPU0_PSPR_STL_DATA (BSS) :
    {
      *(.bss.CPU0_PSPR_RAM_NOINIT)
    }
  } > CPU0_PMI_PSPR    

/* 	Allocate .bss section for modules to CORE1 PSPR */ 
GROUP  LOAD(>PMU_PFLASH0) COPYTABLE[cpu1_copytable] :
  {
    .CPU1_PSPR_STL_DATA (BSS) :
    {
      *(.bss.CPU1_PSPR_RAM_NOINIT)
    }
  } > CPU1_PMI_PSPR 

/* 	Allocate .bss section for modules to CORE2 PSPR */ 
  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu2_copytable]:
  {
    .CPU2_PSPR_STL_DATA (BSS) :
    {
      *(.bss.CPU2_PSPR_RAM_NOINIT)
    }
  } > CPU2_PMI_PSPR   
  
  GROUP LOAD(>PMU_PFLASH0) COPYTABLE:
  {
    .LMU_RAM_STL_DATA (BSS) :
    {
      *(.bss.LMU_RAM_NOINIT)
     }
  } > LMU_SRAM  
/*
	Allocate location for module specific RO data
*/   
  GROUP ALIGN(32):
  {
    .MTL_PMU_ECC_EDC_TST_PF0 (DATA) :
    {
	/*576 bytes need to be reserved for this section*/
      LOC_START_PF0_PATTERNS = .;
      KEEP(*(.rodata.MTL_PMU_ECC_EDC_TST_PF0))
      . = ALIGN(32);
    }
  } > PMU_PF0_PATTERNS

  GROUP ALIGN(32):
  {
    .MTL_PMU_ECC_EDC_TST_PF1 (DATA) :
    {
      /*576 bytes need to be reserved for this section*/
      LOC_START_PF1_PATTERNS = .;
      KEEP(*(.rodata.MTL_PMU_ECC_EDC_TST_PF1))
      . = ALIGN(32);
    }
  } > PMU_PF1_PATTERNS  
  
    GROUP :
  {
    .CPU_MPU_TST_DATA (DATA) :
    {
      __CPU_MPU_TST_DATA_start = .;
      KEEP(*(CPU_MPU_TST_DATA))
      __CPU_MPU_TST_DATA_end = .;
    }
  } > LMU_SRAM
  
  
 
 GROUP BIND(0x70002000) : {
		MCU_STANDBY_RESERVED_START = .;
		. = . + 0x44;
		MCU_STANDBY_RESERVED_END = .;
	} > MCU_STANDBY_DSPR0 

  GROUP BIND(0x8002e200) : 
  	{
	 .PWM_NOTIFICATION (TEXT) : {
	 KEEP(*(.PWM_NOTIFICATION))
		}
	} > PMU_USER_FUNCS
	GROUP BIND(0x8002e300) : {
		.ICU_NOTIFICATION (TEXT) : {
			KEEP(*(.ICU_NOTIFICATION))
		}
	} > PMU_USER_FUNCS
	GROUP BIND(0x8002e500) : {
		.GPT_NOTIFICATION (TEXT) : {
			KEEP(*(.GPT_NOTIFICATION))
		}
	} > PMU_USER_FUNCS
	GROUP BIND(0x8002e700) : {
		.WDG_NOTIFICATION (TEXT) : {
			KEEP(*(.WDG_NOTIFICATION))
		}
	} > PMU_USER_FUNCS
	
	GROUP BIND(0x8002e900):
	{
		.FEE_JOBENDNOTIF_CODE (TEXT):
		{
			__FEE_JOBENDNOTIF_CODE_start = 0x8002e900;
			KEEP(*(.FEE_JOBENDNOTIF_CODE))
			__FEE_JOBENDNOTIF_CODE_end = 0x8002eAff;
		}
	} > PMU_USER_FUNCS

	GROUP BIND(0x8002eB00):
	{
		.FEE_JOBERRNOTIF_CODE (TEXT):
		{
			__FEE_JOBERRNOTIF_CODE_start = 0x8002eB00;
			KEEP(*(.FEE_JOBERRNOTIF_CODE))
			__FEE_JOBERRNOTIF_CODE_end = 0x8002eCff;
		}
	} > PMU_USER_FUNCS

	GROUP BIND(0x8002eD00):
	{
		.FEE_ILLEGALNOTIF_CODE (TEXT) :
		{
			__FEE_ILLEGALNOTIF_CODE_start = 0x8002eD00;
			KEEP(*(.FEE_ILLEGALNOTIF_CODE))
			__FEE_ILLEGALNOTIF_CODE_end = 0x8002eeff;
		}
	} > PMU_USER_FUNCS
/*
	Allocate SBST object files to 32K aligned flash location.
*/ 
  GROUP :
  {
    .text.ifx_opcode_test.asil_b._SBST_Test (TEXT) ALIGN(32768) :
    {  
       *(.text.ifx_opcode_test.asil_b.ISG_800B7000)
       *(.text.ifx_opcode_test.asil_b.Main)
       *(.text.ifx_opcode_test.asil_b.Functions)
       *(.text.ifx_opcode_test.asil_b.Kernel_Direct)
       *(.text.ifx_opcode_test.asil_b.TC16E_Direct)
       *(.text.ifx_opcode_test.asil_b.RelocTable)
       *(.text.ifx_opcode_test.asil_b.ISG_800D7000)
       *(.text.ifx_opcode_test.asil_b.TC16P_Main)
       *(.text.ifx_opcode_test.asil_b.TC16P_Direct)
       *(.text.SBST_CALLBACK_CODE_ROM)
     }
  } > PMU_PFLASH0_CONST

/*
	Allocate location for flash routines code. 
*/  
  GROUP :
  {
    .FLS_AC_ERASE_SOURCE (TEXT) :
    {
      FLS_AC_ERASE_SOURCE_START = .;
      KEEP(*(.FLS_AC_ERASE_SOURCE))          
      FLS_AC_ERASE_SOURCE_END = .;
    }
  }> FLS_ERASE_PFLASH0
  
  GROUP :
  {
    .FLS_AC_WRITE_SOURCE (TEXT) :
    {
      FLS_AC_WRITE_SOURCE_START = .;
      KEEP(*(.FLS_AC_WRITE_SOURCE))          
      FLS_AC_WRITE_SOURCE_END = .;
    }
  }> FLS_WRITE_PFLASH0

  GROUP LOAD(>FLS_ERASE_PFLASH0) COPYTABLE:
  {
    .FLS_AC_ERASE (TEXT) :
    {
      IROM_BASE_ERASE = .;
      *(.FLS_AC_ERASE)
      . = ALIGN(8);
    }
  } > FLS_ERASE_SRAM

  GROUP LOAD(>FLS_WRITE_PFLASH0) COPYTABLE:
  {
    .FLS_AC_WRITE (TEXT) :
    {
      IROM_BASE_WRITE = .;
      *(.FLS_AC_WRITE)
      . = ALIGN(8);
    }
  } > FLS_WRITE_SRAM

/*
	Allocate locate for CORE0 specific (private) code
*/ 
GROUP :
{
  .HSM_CODE_RESERVE_1 (TEXT) :
  {
    __HSM_CODE_RESERVE_1_START = .;
    . = . + 16K;
    __HSM_CODE_RESERVE_1_END = .;
  }
} > HSM_RESERVED1_PMU_FLSAH0


GROUP :
{
  .HSM_CODE_RESERVE_2 (TEXT) :
  {
    __HSM_CODE_RESERVE_2_START = .;
    . = . + 128K;
    __HSM_CODE_RESERVE_2_END = .;
  }
} > HSM_RESERVED2_PMU_FLSAH0
  
  GROUP :
  {
    .CPU0_PRIVATE_CODE (TEXT) :
    {
      __CPU0_PRIVATE_CODE_start = .;
      KEEP(*(".text.CPU0.Private.*"))
      __CPU0_PRIVATE_CODE_end = .;
    }
  } > PMU_PFLASH0

/*
	Allocate locate for CORE1 specific (private) code
*/ 
  
  GROUP :
  {
    .CPU1_PRIVATE_CODE (TEXT) :
    {
      __CPU1_PRIVATE_CODE_start = .;
      KEEP(*(".text.CPU1.Private.*"))
      __CPU1_PRIVATE_CODE_end = .;
    }
  } > PMU_PFLASH0        
  
/*
	Allocate locate for CORE2 specific (private) code
*/ 
  
  GROUP :
  {
    .CPU2_PRIVATE_CODE (TEXT) :
    {
      __CPU2_PRIVATE_CODE_start = .;
      KEEP(*(".text.CPU2.Private.*"))
      __CPU2_PRIVATE_CODE_end = .;
    }
  } > PMU_PFLASH0        

/*
	Allocate locate for shared code across all COREs
*/ 
    
  GROUP :
  {
    .SHARED_CODE (TEXT) :
    {
      __SHARED_CODE_start = .;
      KEEP(*(.text.Shared))
      *(.text.TrapTst_TrapTab.TrapTst_TrapVectors)
      *(.text.DEFAULT_CODE_ROM)
      KEEP(*(.text.Shared.DEFAULT_CODE_ROM))
      *(.text)
		KEEP(*(".text.*"))
      KEEP(*(.frame_info))
		*(.j_class_table)
      KEEP(*(.init)) /*Code executed before calling main*/
      KEEP(*(.fini)) /*Code executed before exiting program*/
      
      __SHARED_CODE_end = .;
      __SOURCE = .;
    }
  } > PMU_PFLASH0

/*
	Allocate location for Configuration related RO data 
*/
  	
  GROUP :
  {
    .MTL_PMU_ECC_EDC_TST_PF2 (DATA) :
    {
      LOC_START_PF2_PATTERNS = .;
      KEEP(*(.rodata.MTL_PMU_ECC_EDC_TST_PF2))
    }
  } > PMU_PF2_PATTERNS  
  
  GROUP :
  {
    .MTL_PMU_ECC_EDC_TST_PF3 (DATA) :
    {
      LOC_START_PF3_PATTERNS = .;
      KEEP(*(.rodata.MTL_PMU_ECC_EDC_TST_PF3))
    }
  } > PMU_PF3_PATTERNS  


/*
	Allocate location for module specific trap vectors.
*/  
   GROUP :
  {
    .CpuMpuTstTrapTable (TEXT) :
    {
	  __CpuMpuTstTrapTable_start = .;
      KEEP(*(.text.CpuMpuTst_TrapTab.CpuMpuTst_TrapVectors))
	  __CpuMpuTstTrapTable_end = .;
    }
  } > PMU_USER_FUNCS
  
  GROUP :
  {
    .SriTstTrapTable (TEXT) :
    {
	  __SriTstTrapTable_start = .;
      KEEP(*(.text.SriTst_TrapTab.SriTst_TrapVectors))
	  __SriTstTrapTable_end = .;
    }
  } > PMU_USER_FUNCS
  
  GROUP :
  {
    .StlTrapTable (TEXT) :
    {
	  __StlTrapTable_start = .;
      KEEP(*(.text.Mtl_TrapTab.Stl_TrapVectors))
	  __StlTrapTable_end = .;
    }
  } > PMU_USER_FUNCS


  GROUP :
  {
    .SramTstTrapTable (TEXT) :
    {
	  __SramTstTrapTable_start = .;
      KEEP(*(.text.SramTst_TrapTab.SramTst_TrapVectors))
	  __SramTstTrapTable_end = .;
    }
  } > PMU_USER_FUNCS  

/*
	Allocate .bss section for modules to CORE0 PSPR
*/  
  
  GROUP :
  {
    .MTL_PMU_ECC_EDC_TST_SPRAM (BSS) :
    {
      *(.bss.MTL_PMU_ECC_EDC_TST_SPRAM)
    }
  } > CPU0_PMI_PSPR
  
  GROUP :
  {
    .MTL_PMU_ECC_EDC_TST_SPRAM_TRAP_TAB (BSS) :
    {
      *(.bss.MTL_PMU_ECC_EDC_TST_SPRAM_TRAP_TAB)
    }
  } > CPU0_PMI_PSPR
  


  
/* 
	Allocate .bss section for modules to CORE0 DSPR
*/



  

  


	
	  GROUP :
  {
    .TEST_RAM_NOCLEAR_32BIT(DATA) :
    {
      __TEST_RAM_NOCLEAR_32BIT_start = .;
      KEEP(*(.data.TEST_RAM_NOCLEAR_32BIT))
      __TEST_RAM_NOCLEAR_32BIT_end = .;
    }
  } > LMU_SRAM





/*
	Allocate location for Configuration related RO data 
*/  
  
  GROUP :
  {
    .RODATA (CONST) :
    {
      __RODATA_start = .;
      *(.rodata)
      *(.rodata.DEFAULT_CONST_FAR_UNSPECIFIED)    
      *(.rodata.DEFAULT_CONST_32BIT)    
	*(.rodata.DEFAULT_CONST_8BIT) 
	*(.rodata.DEFAULT_CONST_16BIT) 
	*(.rodata.Shared.DEFAULT_CONST_FAR_UNSPECIFIED)
       *(.rodata.Shared.DEFAULT_CONST_32BIT)
      *(.rodata.CONFIGURATION_LT)    
	*(.rodata.Shared.DEFAULT_CONST_8BIT)
        *(.rodata.MTL_SRI_EDC_BUSERROR_TST)
        *(.rodata.Shared.DEFAULT_CONST_16BIT)
        *(.rodata.Shared.DEFAULT_ASIL0_CONST_8BIT)
        *(.rodata.Shared.CONFIGURATION_PB)
        *(.rodata.CPU1.Private.CONFIGURATION_PB)
        *(.rodata.Shared.CONFIGURATION_ECUM_PB)
	*(.rodata.Shared.DEFAULT_CONST_FAR_UNSPECIFIED)
	KEEP(*(".rodata.*"))
      __RODATA_end = .;
    }
    .ctors (CONST) ALIGN(4) : { ctordtor.o(.ctors) *(.ctors) }
    .dtors (CONST) ALIGN(4) : { ctordtor.o(.dtors) *(.dtors) }
    .copytable (CONST) : 
    {
        __DATA_ROM = .;
    }
    .cpu0_copytable (CONST) : 
    {
        __CPU0_DATA_ROM = .;
    }
    .cpu1_copytable (CONST) : 
    {
        __CPU1_DATA_ROM = .;
    }
    .cpu2_copytable (CONST) : 
    {
        __CPU2_DATA_ROM = .;
    }
  } > PMU_PFLASH0_CONST

	GROUP BIND(0xa0100000) : {
		.CONFIGURATION_ECUM_PB (CONST) : {
			KEEP(*(.CONFIGURATION_ECUM_PB))
		}
	} > CONFIG_DATA

	GROUP BIND(0xa01000C0) : {
		.CONFIGURATION_PB (CONST) : {
			KEEP(*(.rodata.CONFIGURATION_PB))
			. = ALIGN(4) ;
		}
	} > CONFIG_DATA

  GROUP : {
             __DESTINATION = .;
            .FLSLOADEROUTPUT (TEXT) LOAD(__SOURCE) : {*(.FLSLOADERRAMCODE)}
            __END_SOURCE = .;
  } > CPU0_DMI_DSPR

/*********************************** Data allocation *************************************/
/* 
	Initialize private data section for each individual core
*/
  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu0_copytable]:
  {
    .CPU0_PRIVATE_DATA (DATA) :
    {
      __CPU0_PRIVATE_DATA_start = .;
      KEEP(*(".data.CPU0.Private.*"))
      __CPU0_PRIVATE_DATA_end = .;
      __CPU0_PRIVATE_DATA_size = __CPU0_PRIVATE_DATA_end - __CPU0_PRIVATE_DATA_start;
    }
  } > CPU0_DMI_DSPR

  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu1_copytable]:
  {
    .CPU1_PRIVATE_DATA (DATA) :
    {
      __CPU1_PRIVATE_DATA_start = .;
      KEEP(*(".data.CPU1.Private.*"))
      __CPU1_PRIVATE_DATA_end = .;
      __CPU1_PRIVATE_DATA_size = __CPU1_PRIVATE_DATA_end - __CPU1_PRIVATE_DATA_start;
    }
  } > CPU1_DMI_DSPR

  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu2_copytable]:
  {
    .CPU2_PRIVATE_DATA (DATA) :
    {
      __CPU2_PRIVATE_DATA_start = .;
      KEEP(*(".data.CPU2.Private.*"))
      __CPU2_PRIVATE_DATA_end = .;
      __CPU2_PRIVATE_DATA_size = __CPU2_PRIVATE_DATA_end - __CPU2_PRIVATE_DATA_start;
    }
  } > CPU2_DMI_DSPR

/* 
	Initialize shared data section for all cores
*/  
  GROUP LOAD(>PMU_PFLASH0_CONST) COPYTABLE:
  {
    .SHARED_DATA (DATA) :
    {
      __SHARED_DATA_start = .;
      KEEP(*(.data.Shared))
      *(.data)
      *(.data.DEFAULT_RAM_NONZERO_INIT_8BIT)
      *(.data.DEFAULT_RAM_32BIT_NONZERO_INIT)
      *(.data.DEFAULT_RAM_UNSPECIFIED_NONZERO_INIT)
      *(.data.DEFAULT_RAM_32BIT)
	  *(.data.Shared.DEFAULT_RAM_32BIT)
      *(.data.DEFAULT_RAM_8BIT)
	  *(.data.Shared.DEFAULT_RAM_8BIT)
	  *(.data.DEFAULT_RAM_16BIT)
	  *(.data.Shared.DEFAULT_RAM_16BIT)
      *(.data.DEFAULT_RAM_UNSPECIFIED)
	  *(.data.Shared.DEFAULT_RAM_UNSPECIFIED)
      *(.data.DEFAULT_RAM_NONZERO_32BIT)
      *(.data.Shared.DEFAULT_RAM_INIT_32BIT)
	  *(.data.DEFAULT_RAM_32BYTE)
	  *(.data.CpuMpu.DEFAULT_RAM_8BYTE)
	  *(.data.FLS_RESERVED)
	  *(.data.DEFAULT_RAM_POWER_ON_INIT_8BIT)
	  *(.data.DEFAULT_RAM_POWER_ON_INIT_16BIT)
	  *(.data.DEFAULT_RAM_POWER_ON_INIT_32BIT)
	  *(.data.DEFAULT_RAM_POWER_ON_INIT_UNSPECIFIED)
	  *(.data.ADC_DMA_EMUXSCAN_RAM_16BIT)
	  *(".data.*")
      __SHARED_DATA_end = .;
      __SHARED_DATA_size = __SHARED_DATA_end - __SHARED_DATA_start  ;
    }
  } > LMU_SRAM

GROUP LOAD(>PMU_PFLASH0_CONST) COPYTABLE:
{
.SPI_RAM_FAST_32BIT (DATA) : 
	{
        	. = ALIGN(4) ;
		      KEEP(*(.SPI_RAM_FAST_32BIT))
	}
} > LMU_SRAM

/* 
	Initialize sdata section for each individual core
*/
  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu0_copytable]:
  {
    .CPU0_PRIVATE_SDATA (DATA) :
    {
    	__CPU0_SMALL_DATA_start = .;
        __CPU0_SMALL_DATA = . + 0x8000;
        KEEP(*(".sdata.CPU0.Private.*"))
        KEEP(*(.sdata.Shared))
        *(.sdata)
        __CPU0_SMALL_DATA_end = .;
        __CPU0_SMALL_DATA_size = __CPU0_SMALL_DATA_end -__CPU0_SMALL_DATA_start ;
    }
  } > CPU0_DMI_DSPR
    
  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu1_copytable]:
  {
    .CPU1_PRIVATE_SDATA (DATA) :
    {
    	__CPU1_SMALL_DATA_start = .;
        __CPU1_SMALL_DATA = . + 0x8000;
        KEEP(*(".sdata.CPU1.Private.*"))
        __CPU1_SMALL_DATA_end = .;
        __CPU1_SMALL_DATA_size = __CPU1_SMALL_DATA_end -__CPU1_SMALL_DATA_start;
    }
  } > CPU1_DMI_DSPR

  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu2_copytable]:
  {
    .CPU2_PRIVATE_SDATA  :
    {
    	__CPU2_SMALL_DATA_start = .;
        __CPU2_SMALL_DATA = . + 0x8000;
        KEEP(*(".sdata.CPU2.Private.*"))
        __CPU2_SMALL_DATA_end = .;
        __CPU2_SMALL_DATA_size =__CPU2_SMALL_DATA_end -__CPU2_SMALL_DATA_start;
    }
  } > CPU2_DMI_DSPR

/* 
	Initialize sdata (ro) section for each individual core
*/
  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu0_copytable]:
  {
    .CPU0_PRIVATE_SDATA2 (DATA) :
    {
       __CPU0_SMALL_DATA2_start = .;
        __CPU0_SMALL_DATA2 = . + 0x8000;
        KEEP(*(".sdata.rodata.CPU0.Private.*"))
        KEEP(*(.sdata.rodata.Shared))
        *(.sdata.rodata)
	*(".sdata.*")
        __CPU0_SMALL_DATA2_end = .;
        __CPU0_SMALL_DATA2_size =  __CPU0_SMALL_DATA2_end - __CPU0_SMALL_DATA2_start;
    }
  } > CPU0_DMI_DSPR

  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu1_copytable]:
  {
    .CPU1_PRIVATE_SDATA2 (DATA) :
    {
    		__CPU1_SMALL_DATA2_start =.;
        __CPU1_SMALL_DATA2 = . + 0x8000;
        KEEP(*(".sdata.rodata.CPU1.Private.*"))
        __CPU1_SMALL_DATA2_end = .;
        __CPU1_SMALL_DATA2_size = __CPU1_SMALL_DATA2_end -__CPU1_SMALL_DATA2_start;
    }
  } > CPU1_DMI_DSPR

  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu2_copytable]:
  {
    .CPU2_PRIVATE_SDATA2 (DATA) :
    {
    		__CPU2_SMALL_DATA2_start = .;
        __CPU2_SMALL_DATA2 = . + 0x8000;
        KEEP(*(".sdata.rodata.CPU2.Private.*"))
        __CPU2_SMALL_DATA2_end = .;
        __CPU2_SMALL_DATA2_size = __CPU2_SMALL_DATA2_end - __CPU2_SMALL_DATA2_start;
    }
  } > CPU2_DMI_DSPR
  
/* 
	Initialize zdata section for each individual core
*/
  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu0_copytable]:
  {
    .CPU0_PRIVATE_ZDATA (DATA) :
    {
        __CPU0_PRIVATE_ZDATA_start = .;
        KEEP(*(".zdata.CPU0.Private.*"))
        __CPU0_PRIVATE_ZDATA_end = .;
        __CPU0_PRIVATE_ZDATA_size = __CPU0_PRIVATE_ZDATA_end - __CPU0_PRIVATE_ZDATA_start;
    }
  } > CPU0_DMI_DSPR_NEAR

  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu1_copytable]:
  {
    .CPU1_PRIVATE_ZDATA (DATA) :
    {
        __CPU1_PRIVATE_ZDATA_start = .;
        KEEP(*(.zdata.CPU1.Private))
        __CPU1_PRIVATE_ZDATA_end = .;
        __CPU1_PRIVATE_ZDATA_size = __CPU1_PRIVATE_ZDATA_end - __CPU1_PRIVATE_ZDATA_start;
    }
  } > CPU1_DMI_DSPR

  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu2_copytable]:
  {
    .CPU2_PRIVATE_ZDATA (DATA) :
    {
        __CPU2_PRIVATE_ZDATA_start = .;
        KEEP(*(.zdata.CPU2.Private))
        __CPU2_PRIVATE_ZDATA_end = .;
        __CPU2_PRIVATE_ZDATA_size = __CPU2_PRIVATE_ZDATA_end - __CPU2_PRIVATE_ZDATA_start;
    }
  } > CPU2_DMI_DSPR

/* 
	Initialize shared zdata section for each individual core
*/  
  GROUP LOAD(>PMU_PFLASH0) COPYTABLE:
  {
    .SHARED_ZDATA (DATA) :
    {
        __SHARED_ZDATA_start = .;
        KEEP(*(.zdata.Shared))
        *(.zdata)
	*(".zdata.*")
        __SHARED_ZDATA_end = .;
        __SHARED_ZDATA_size = __SHARED_ZDATA_end - __SHARED_ZDATA_start;
    }
  } > LMU_SRAM

/* 
	Initialize bit data section for each individual core
*/
  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu0_copytable]:
  {
    .CPU0_PRIVATE_BDATA (DATA) :
    {
        __CPU0_PRIVATE_BDATA_start = .;
        KEEP(*(.bdata.CPU0.Private))
        __CPU0_PRIVATE_BDATA_end = .;
        __CPU0_PRIVATE_BDATA_size = __CPU0_PRIVATE_BDATA_end - __CPU0_PRIVATE_BDATA_start ;
    }
  } > CPU0_DMI_DSPR

  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu1_copytable]:
  {
    .CPU1_PRIVATE_BDATA (DATA) :
    {
        __CPU1_PRIVATE_BDATA_start = .;
        KEEP(*(.bdata.CPU1.Private))
        __CPU1_PRIVATE_BDATA_end = .;
        __CPU1_PRIVATE_BDATA_size =__CPU1_PRIVATE_BDATA_end - __CPU1_PRIVATE_BDATA_start;
    }
  } > CPU1_DMI_DSPR

  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu2_copytable]:
  {
    .CPU2_PRIVATE_BDATA (DATA) :
    {
        __CPU2_PRIVATE_BDATA_start = .;
        KEEP(*(.bdata.CPU2.Private))
        __CPU2_PRIVATE_BDATA_end = .;
        __CPU2_PRIVATE_BDATA_size = __CPU2_PRIVATE_BDATA_end  - __CPU2_PRIVATE_BDATA_start;
    }
  } > CPU2_DMI_DSPR
/* 
	Initialize shared bitdata section for all cores
*/
  GROUP LOAD(>PMU_PFLASH0) COPYTABLE:
  {
    .SHARED_BDATA (DATA) :
    {
        __SHARED_BDATA_start = .;
        KEEP(*(.bdata.Shared))
        *(.bdata)
        __SHARED_BDATA_end = .;
        __SHARED_BDATA_size = __SHARED_BDATA_end - __SHARED_BDATA_start;
    }
  } > LMU_SRAM
  
/* 
	Initialize bss section for each individual core
*/
  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu0_copytable]:
  {
    .CPU0_PRIVATE_BSS (BSS) :
    {
        __CPU0_PRIVATE_BSS_start = .;
        KEEP(*(".bss.CPU0.Private.*"))
        __CPU0_PRIVATE_BSS_end = .;
        __CPU0_PRIVATE_BSS_size = __CPU0_PRIVATE_BSS_end - __CPU0_PRIVATE_BSS_start;
    }
  } > CPU0_DMI_DSPR

  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu1_copytable]:
  {
    .CPU1_PRIVATE_BSS (BSS) :
    {
        __CPU1_PRIVATE_BSS_start = .;
        
        *(.bss.CPU1.Private.DEFAULT_RAM_8BIT)
        *(.bss.CPU1.Private.DEFAULT_RAM_ASIL0_8BIT)
        *(.bss.CPU1.Private.DEFAULT_RAM_ASIL0_8BIT)
        *(.bss.CPU1.Private.DEFAULT_RAM_32BIT)
	KEEP(*(".bss.CPU1.Private.*"))
        __CPU1_PRIVATE_BSS_end = .;
        __CPU1_PRIVATE_BSS_size = __CPU1_PRIVATE_BSS_end - __CPU1_PRIVATE_BSS_start;
    }
  } > CPU1_DMI_DSPR

  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu2_copytable]:
  {
    .CPU2_PRIVATE_BSS (BSS) :
    {
        __CPU2_PRIVATE_BSS_start = .;
        KEEP(*(".bss.CPU2.Private.*"))
        __CPU2_PRIVATE_BSS_end = .;
        __CPU2_PRIVATE_BSS_size = __CPU2_PRIVATE_BSS_end - __CPU2_PRIVATE_BSS_start;
    }
  } > CPU2_DMI_DSPR

  GROUP :
  {
    .NOCLEAR_BSS (BSS) :
    {
        __NOCLEAR_BSS_start = .;
        *(.bss.TEST_RAM_NOCLEAR_32BIT)
        __NOCLEAR_BSS_end = .;
        __NOCLEAR_BSS_size = __NOCLEAR_BSS_end - __NOCLEAR_BSS_start;
    }
  } > LMU_SRAM
/* 
	Initialized shared bss section for all cores
*/
  GROUP LOAD(>PMU_PFLASH0) COPYTABLE:
  {
    .bss (BSS) :
    {
        __SHARED_BSS_start = .;
        KEEP(*(.bss.Shared))
        *(.bss)
	*[COMMON]
        *(.bss.Shared.DEFAULT_RAM_8BIT)
        *(.bss.Shared.DEFAULT_RAM_32BIT)
        *(.bss.Shared.DEFAULT_RAM_UNSPECIFIED)
        *(.bss.Shared.DEFAULT_RAM_ASIL0_UNSPECIFIED)
        *(.bss.Shared.DEFAULT_RAM_16BIT)
		*(.bss.DEFAULT_RAM_8BIT)
		*(.bss.DEFAULT_RAM_16BIT)		
		*(.bss.DEFAULT_RAM_32BIT)
		*(.bss.DEFAULT_RAM_UNSPECIFIED)
		*(.bss.DEFAULT_RAM_32BYTE)
		*(.bss.CpuMpu.DEFAULT_RAM_8BYTE)
		*(.bss.DEFAULT_RAM_POWER_ON_INIT_8BIT)
		*(.bss.DEFAULT_RAM_POWER_ON_INIT_16BIT)
		*(.bss.DEFAULT_RAM_POWER_ON_INIT_32BIT)
		*(.bss.DEFAULT_RAM_POWER_ON_INIT_UNSPECIFIED)
		*(.bss.ADC_DMA_EMUXSCAN_RAM_16BIT)
		*(".bss.*")
        __SHARED_BSS_end = .;
        __SHARED_BSS_size = __SHARED_BSS_end - __SHARED_BSS_start ;
    }
  } > LMU_SRAM

/* 
	Initialized sbss section for each individual core
*/
  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu0_copytable]:
  {
    .CPU0_PRIVATE_SBSS (BSS) :
    {
        __CPU0_PRIVATE_SBSS_start = .;
        KEEP(*(".sbss.CPU0.Private.*"))
        __CPU0_PRIVATE_SBSS_end = .;
        __CPU0_PRIVATE_SBSS_size = __CPU0_PRIVATE_SBSS_end - __CPU0_PRIVATE_SBSS_start;
    }
  } > CPU0_DMI_DSPR

  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu1_copytable]:
  {
    .CPU1_PRIVATE_SBSS (BSS) :
    {
        __CPU1_PRIVATE_SBSS_start = .;
        KEEP(*(".sbss.CPU1.Private.*"))
        __CPU1_PRIVATE_SBSS_end = .;
        __CPU1_PRIVATE_SBSS_size = __CPU1_PRIVATE_SBSS_end - __CPU1_PRIVATE_SBSS_start;
    }
  } > CPU1_DMI_DSPR

  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu2_copytable]:
  {
    .CPU2_PRIVATE_SBSS (BSS) :
    {
        __CPU2_PRIVATE_SBSS_start = .;
        KEEP(*(".sbss.CPU2.Private.*"))
        __CPU2_PRIVATE_SBSS_end = .;
        __CPU2_PRIVATE_SBSS_size = __CPU2_PRIVATE_SBSS_end - __CPU2_PRIVATE_SBSS_start;
    }
  } > CPU2_DMI_DSPR

/* 
	Initialized bss section for all cores
*/
  
  GROUP LOAD(>PMU_PFLASH0) COPYTABLE:
  {
    .SHARED_SBSS (BSS) :
    {
        __SHARED_SBSS_start = .;
        KEEP(*(.sbss.Shared))
        *(.sbss)
	*(".sbss.*")
        __SHARED_SBSS_end = .;
        __SHARED_SBSS_size = __SHARED_SBSS_end - __SHARED_SBSS_start;
    }
  } > LMU_SRAM

/* 
	Initialized zbss section for each individual core
*/
  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu0_copytable]:
  {
    .CPU0_PRIVATE_ZBSS (BSS) :
    {
        __CPU0_PRIVATE_ZBSS_start = .;
        KEEP(*(".zbss.CPU0.Private.*"))
        __CPU0_PRIVATE_ZBSS_end = .;
        __CPU0_PRIVATE_ZBSS_size = __CPU0_PRIVATE_ZBSS_end - __CPU0_PRIVATE_ZBSS_start;
    }
  } > CPU0_DMI_DSPR_NEAR

  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu1_copytable]:
  {
    .CPU1_PRIVATE_ZBSS (BSS) :
    {
        __CPU1_PRIVATE_ZBSS_start = .;
        KEEP(*(".zbss.CPU1.Private.*"))
        __CPU1_PRIVATE_ZBSS_end = .;
        __CPU1_PRIVATE_ZBSS_size = __CPU1_PRIVATE_ZBSS_end - __CPU1_PRIVATE_ZBSS_start;
    }
  } > CPU1_DMI_DSPR

  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu2_copytable]:
  {
    .CPU2_PRIVATE_ZBSS (BSS) :
    {
        __CPU2_PRIVATE_ZBSS_start = .;
        KEEP(*(".zbss.CPU2.Private.*"))
        __CPU2_PRIVATE_ZBSS_end = .;
        __CPU2_PRIVATE_ZBSS_size = __CPU2_PRIVATE_ZBSS_end - __CPU2_PRIVATE_ZBSS_start;
    }
  } > CPU2_DMI_DSPR
  
/* 
	Initialized zbss section for all cores
*/
  GROUP LOAD(>PMU_PFLASH0) COPYTABLE:
  {
    .SHARED_ZBSS (BSS) :
    {
        __SHARED_ZBSS_start = .;
        KEEP(*(.zbss.Shared))
        *(.zbss)
        *(.zbss.DEFAULT_RAM_FAST_32BIT)
        *(.zbss.Shared.DEFAULT_RAM_FAST_32BIT)
		*(.zbss.DEFAULT_RAM_FAST_UNSPECIFIED)
		*(.zbss.Shared.DEFAULT_RAM_FAST_UNSPECIFIED)
	*(".zbss.*")
        __SHARED_ZBSS_end = .;
        __SHARED_ZBSS_size = __SHARED_ZBSS_end  - __SHARED_ZBSS_start;
    }
  } > LMU_SRAM

/* 
	Initialized bbss section for each individual core
*/
  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu0_copytable]:
  {
    .CPU0_PRIVATE_BBSS (BSS) :
    {
        __CPU0_PRIVATE_BBSS_start = .;
        KEEP(*(.bbss.CPU0.Private))
        __CPU0_PRIVATE_BBSS_end = .;
        __CPU0_PRIVATE_BBSS_size = __CPU0_PRIVATE_BBSS_end - __CPU0_PRIVATE_BBSS_start;
    }
  } > CPU0_DMI_DSPR

  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu1_copytable]:
  {
    .CPU1_PRIVATE_BBSS (BSS) :
    {
        __CPU1_PRIVATE_BBSS_start = .;
        KEEP(*(.bbss.CPU1.Private))
        __CPU1_PRIVATE_BBSS_end = .;
        __CPU1_PRIVATE_BBSS_size = __CPU1_PRIVATE_BBSS_end - __CPU1_PRIVATE_BBSS_start;
    }
  } > CPU1_DMI_DSPR

  GROUP LOAD(>PMU_PFLASH0) COPYTABLE[cpu2_copytable]:
  {
    .CPU2_PRIVATE_BBSS (BSS) :
    {
        __CPU2_PRIVATE_BBSS_start = .;
        KEEP(*(.bbss.CPU2.Private))
        __CPU2_PRIVATE_BBSS_end = .;
        __CPU2_PRIVATE_BBSS_size = __CPU2_PRIVATE_BBSS_end - __CPU2_PRIVATE_BBSS_start;
    }
  } > CPU2_DMI_DSPR
  
/* 
	Initialized bbss section for all cores
*/
  GROUP LOAD(>PMU_PFLASH0) COPYTABLE:
  {
    .SHARED_BBSS (BSS) :
    {
        __SHARED_BBSS_start = .;
        KEEP(*(.bbss.Shared))
        *(.bbss) 
        __SHARED_BBSS_end = .;
        __SHARED_BBSS_size =  __SHARED_BBSS_end - __SHARED_BBSS_start;
    }
  } > LMU_SRAM
  GROUP:
	{
		.NO_INIT_SECTION (BSS) :
		{
			*(.bss.DEFAULT_RAM_NOINIT_8BIT)
			*(.bss.DEFAULT_RAM_NOINIT_16BIT)
			*(.bss.DEFAULT_RAM_NOINIT_32BIT)
			*(.bss.DEFAULT_RAM_NOINIT_UNSPECIFIED)
			
		}
	} > CPU0_DMI_DSPR

/* 
	Setup Flsloader code which is executed from RAM 
*/
  GROUP LOAD(>PMU_PFLASH0) COPYTABLE:
  {
    .FLSLOADERRAMCODE :
    {
       _code_ram_start = .;
       *(.FLSLOADERRAMCODE)
       . = ALIGN(4);
       _code_ram_end = .;
       /*_code_rom_start = .FLSLOADERRAMCODE;*/
       _code_ram_size = _code_ram_end - _code_ram_start;
    }
  } > FLSLOADER_RAM_CODE


  GROUP LOAD(>PMU_PFLASH0_CONST) COPYTABLE:
  {
    .PMUECCEDCTST_TVT_RAMCODE :
    {
       LOC_START_PmuEccEdcTst_tvt_RAM_RUNCODE = .;
       *(.PMUECCEDCTST_TVT_RAMCODE)
       . = ALIGN(256);
       LOC_END_PmuEccEdcTst_tvt_RAM_RUNCODE = .;
       LOC_START_PmuEccEdcTst_tvt_PFLASHCODE = ADDR (.PMUECCEDCTST_TVT_RAMCODE);
       LOC_END_PmuEccEdcTst_tvt_PFLASHCODE = LOC_START_PmuEccEdcTst_tvt_PFLASHCODE + SIZEOF(.PMUECCEDCTST_TVT_RAMCODE);
    }
  } > CPU0_PMI_PSPR


  GROUP LOAD(>PMU_PFLASH0_CONST) COPYTABLE:
  {
    .PFLASH_MON_ECCEDC_RAMCODE :
    {
       LOC_START_PflashMon_EccEdc_RAM_RUNCODE = .;
       *(.PFLASH_MON_ECCEDC_RAMCODE)
       . = ALIGN(4);
       LOC_END_PflashMon_EccEdc_RAM_RUNCODE = .;
       LOC_START_PflashMon_EccEdc_PFLASHCODE = ADDR (.PFLASH_MON_ECCEDC_RAMCODE);
       LOC_END_PflashMon_EccEdc_PFLASHCODE = LOC_START_PflashMon_EccEdc_PFLASHCODE + SIZEOF(.PFLASH_MON_ECCEDC_RAMCODE);
	   
    }
  } > CPU0_PMI_PSPR
 	
GROUP BIND(0x701011C8): {
		FLS_RESERVED_START = .;
		. = . + 499;
		FLS_RESERVED_END = .;
	} > CPU0_PMI_PSPR	
 
  GROUP :
  {
    .cpu0_csa (BSS) :
    {
         . = ALIGN(64);
         __CPU0_CSA_BEGIN = . ;
         . += __CSA_SIZE;
         __CPU0_CSA_END = .;
    }
  } > CPU0_DMI_DSPR

  GROUP :
  {
    .cpu0_istack (BSS) :
    {
        . =  ALIGN(8);
	__CPU0_ISTACK_END    = .;
        . += __ISTACK_SIZE;
        __CPU0_ISTACK = .;
    }
  } > CPU0_DMI_DSPR

  GROUP :
  {
    .cpu0_ustack (BSS) :
    {
        . =  ALIGN(8);
        __SP_END = .;
	__CPU0_USTACK_END    = .;
        . += __USTACK_SIZE;
        __CPU0_USTACK = .;
    }
  } > CPU0_DMI_DSPR

/*
	Setup csa, istack and ustack area for core1
*/  
  GROUP :
  {
    .cpu1_csa (BSS):
    {
         . = ALIGN(64);
         __CPU1_CSA_BEGIN = . ;
         . += __CSA_SIZE;
         . = ALIGN(64);         
         __CPU1_CSA_END = .;
    }
  } > CPU1_DMI_DSPR

  GROUP :
  {
    .cpu1_istack (BSS) :
    {
        . =  ALIGN(8);
	__CPU1_ISTACK_END    = .;
        . += __ISTACK_SIZE;
        __CPU1_ISTACK = .;
    }
  } > CPU1_DMI_DSPR

  GROUP :
  {
    .cpu1_ustack (BSS) :
    {
        . =  ALIGN(8);
	__CPU1_USTACK_END    = .;
        . += __USTACK_SIZE;
        __CPU1_USTACK = .;
    }
  } > CPU1_DMI_DSPR

/*
	Setup csa, istack and ustack area for core2
*/    
  GROUP :
  {
    .cpu2_csa (BSS) :
    {
         . = ALIGN(64);
         __CPU2_CSA_BEGIN = . ;
         . += __CSA_SIZE;
         . = ALIGN(64);         
         __CPU2_CSA_END = .;
    }
  } > CPU2_DMI_DSPR

  GROUP :
  {
    .cpu2_istack (BSS) :
    {
        . =  ALIGN(8);
	__CPU2_ISTACK_END    = .;
        . += __ISTACK_SIZE;
        __CPU2_ISTACK = .;
    }
  } > CPU2_DMI_DSPR

  GROUP :
  {
    .cpu2_ustack (BSS) :
    {
        . =  ALIGN(8);
	__CPU2_USTACK_END    = .;
        . += __USTACK_SIZE;
        __CPU2_USTACK = .;
    }
  } > CPU2_DMI_DSPR
  
/*
	Setup Heap area.
*/
  GROUP :
  {
    .heap (BSS):
    {
        . =  ALIGN(8);
        __HEAP_START = .;
        . += __HEAP_SIZE;
      . =  ALIGN(8);
        __HEAP_END = .;      
    }
  } > DMI_DSPR
  
}

